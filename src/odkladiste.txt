odkladiste

    // arm();
    // testovaci(); // - testuje pouze robotickou ruku 
    // if ( read_joystick() )
    // {
    //     float axis_0 = (abs(axis[0]) < 10) ? 0 : axis[0] /128.0; 
    //     axis_0 = axis_0*axis_0*axis_0;
    //     float axis_1 = (abs(axis[1]) < 10) ? 0 : axis[1] /128.0; 
    //     axis_1 = axis_1*axis_1*axis_1;
    //     int levy_m = -(axis_1- (axis_0 /2 )) * speed_coef;
    //     int pravy_m = -(axis_1+ (axis_0 /2 )) * speed_coef;
    //     odrive.speed( 0 , levy_m );
    //     odrive.speed( 1 , pravy_m  );
    //     if ( odrive.error() )
    //         odrive.dumpErrors();
    //     printf(" %i %i \n ", levy_m, pravy_m );
    //     Serial.println(levy_m);
    //     Serial.println(pravy_m);
    //     SerialBT.println(levy_m);
    //     SerialBT.println(pravy_m);
    //     SerialBT.print(levy_m); SerialBT.print(" "); SerialBT.println(pravy_m);
    // }

    // odrive.turnOff();  // vypíná odrive
    // Serial.println( "Turned off" );

    // while( true ) {
    //     delay( 500 );
    //     Serial.print( "Pos: " );
    //     Serial.println( odrive.getPos( 0 ) );  // vraci pozici enkoderu osy 0
    // }

    // void speed( int axis, float speed ); // pro osu axis nastavi rychlost speed v ticich za sekundu
    // void setAccel( float accel );  // nastavi zrychleni pro dalsi pohyb


// bool obstacle();
// {
//     Serial.print(d);  // OVERIT !!!!!



// }
// t = millis();

// while ( ! Serial1.available() )  
//         sleep(0);
//     c = Serial1.read();

// if ((millis() - t) > 4000) {
//             rbc().setMotors().stop(LEFT_MOTOR)
//                              .stop(RIGHT_MOTOR)
//                              .set();
//             Serial.println("Calibration failed (timeout)");
//             return false;
//         }



b4ecf80f50513622ff73f1b219c4429a63851531

   // odriveSerial.begin(115200, SERIAL_8N1, 13, 15);

   

    // Serial.println("Going up");
    // for (int i = 0; i != 10000; i += 1) {
    //     odrive.SetPosition(0, i);
    //     odrive.SetPosition(1, i);
    //     delay(1);
    // }
    // Serial.println("Going down");
    // for (int i = 10000; i != 0; i -= 1) {
    //     odrive.SetPosition(0, i);
    //     odrive.SetPosition(1, i);
    //     delay(1);
    // }
    // Serial.println("Stop");

    // configureOdrive( odrive );


    
// Servo servo; 

// int servo_open = 100;
// int servo_close = 180;
// int position_servo = 100; // pro postupne krokovani serva pro kalibraci 
// int power_motor = 192;
// int otacka = 235; // pocet tiku na otacku 
// int ctverec = 250; // pocet tiku na ctverec - Praha
// int zatoc = 280;  // pocet tiku na zatoceni o 90 stupnu
// static const uint32_t i2c_freq = 400000;
// bool L_G_light = false; // pro blikani zelene LED - indikuje, ze deska funguje 


// Servo servo;

// int servo_open = 100;
// int servo_close = 180;
// int position_servo = 100; // pro postupne krokovani serva pro kalibraci
// int power_motor = 192;
// int otacka = 235; // pocet tiku na otacku
// int ctverec = 250; // pocet tiku na ctverec - Praha
// int zatoc = 280;  // pocet tiku na zatoceni o 90 stupnu
// static const uint32_t i2c_freq = 400000;
// bool L_G_light = false; // pro blikani zelene LED - indikuje, ze deska funguje



 if ( (btn[4]==1) and (btn_last[4]==0) )
        rbc().setMotors().power(OTOCNY_MOTOR, -motor_power)
                         .set();
    if ( (btn[4]==0) and (btn_last[4]==1) )
        rbc().setMotors().power(OTOCNY_MOTOR, 0)
                         .set();

    if ( (btn[5]==1) and (btn_last[5]==0) )
        rbc().setMotors().power(OTOCNY_MOTOR, motor_power)
                         .set();

    if ( (btn[5]==0) and (btn_last[5]==1) )
        rbc().setMotors().power(OTOCNY_MOTOR, 0)
                         .set();